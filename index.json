[{"content":"몸담은 팀의 업무 범위가 늘어나며 문의가 점점 많아지기 시작했다. 다른 팀에선 이슈가 생겼을 때 누구에게 연락해야 하는지 모르기에 조직도의 가장 아래에 있거나 일면식이 있는 팀원에게 연락하기 마련. 이로 인해 특정 구성원에게 자잘한 업무가 몰리고 커뮤니케이션의 비효율을 초래하기 시작하였다.\n다행히도 Jira를 도입한 상태였기에 Jira Service Management를 시작하면 되겠다고 생각, 팀의 Admin을 자처하여 구성하겠노라 선언했다. 글로벌 솔루션이니 쉬운 줄 알았거든. 과거형으로 표현한 것은 당연히 녹록지 않았다는 것. 좋은 말로는 세세한 커스터마이징이 가능한, 다른 말로는 작은 것 하나하나 다 신경 써야 하는 이 녀석을 다루며 당황했던 순간을 까먹기 전에 써두려 한다.\nJira Workflows Jira Service management를 비롯한 Jira 이슈들은 상태 값을 가지고 있다. In progress, Done 등 특정 업무의 흐름을 표시해준다. 이러한 흐름을 Workflows라는 기능으로 관리하고 있다.\nJira도 당연히 기본적인 workflow를 제공하고 있다. 하지만, 다양한 환경에 따라 절차는 달라지기 마련. 어떤 업무는 부서장 승인을 득한 뒤 진행해야 하고, 고객과 관련된 것이라면 부서장 승인에 더해 개인정보 관리자의 승인까지 필요할 수가 있다. 이러한 요구에 따라 새롭게 만들어져야 하기에 결국 커스터마이징을 하게 된다.\n다행히 workflow를 그리는 것 자체는 어렵지 않다. 어쩌면 재밌기도 한 마지막 단계. 여차저차 필요한 workflow를 만든 후 프로젝트에 적용했는데 원하는 동작이 일어나지 않았다.\n요청이 접수되면 승인권자에게 알리기 이미 요청 양식은 준비된 상태였다. 일부 티켓은 접수 단계에서 팀장 등 상급자에게 승인을 받도록 하였고, workflow에도 관련 단계를 구성했다. 하지만 요청을 제출해도 등록한 상급자에게 알림이 가지 않았다.\n양식에 옵션으로 제공되고 있지만, 이것조차 따로 설정을 해줘야 한다고. workflow에서 wating for approval을 선택하면 Add approval 옵션이 따로 있는 것을 확인할 수 있다. 추가로 Configure를 확인하여 각 환경에 맞는 구성을 해줘야 알림이 정상적으로 전달된다. 이때부터 기대하는 행동 하나하나마다 관련 옵션을 확인하기 시작했다.\n지정된 승인자 구성하기 좌초된 배를 겨우 인양했나 싶었지만 바로 암초에 부딪혔다. 이번에는 미리 승인자를 지정해두는 작업. 예를 들어 고객과 관련된 요청이면 개인정보보호책임자의 승인이 필요할 것이다. 요청을 처리하는 작업자와 책임자가 동일인이라면 문제가 없겠지만, 분리되어 있기에 매번 별도의 승인이 필요할 것이다. 책임자는 정해져 있기에 매번 신청할 때마다 새로이 정하도록 하는 것은 비효율적. workflow에 미리 지정해두고자 했다.\n이러한 특수한 경우를 위해 추가로 workflow를 만들었다. 앞서 언급한 상급자의 승인을 득한 후, 특정 책임자의 추가 승인을 득하는 절차로 구성하였다. 구현하고자 하는 동작은 상급자가 승인한 경우, 책임자에게 자동으로 승인요청이 가도록 하는 것. 첫 번째 승인과 두 번째 승인을 이어주는 Transition을 선택하여 구성할 수 있다.\n메뉴에서 Post Functions를 선택하면 앞선 절차가 완료되면서 진행될 작업을 정의할 수 있다. 여기서 추가해야 할 것은 추가 승인자를 등록해주는 것. Add post function을 선택하면 작업을 추가할 수 있다. 주어지는 다양한 옵션 중 선택한 것은 Update Issue Custom Field인데, Custom Field로 추가해둔 권한 승인자를 이슈에 업데이트해야 승인 절차가 정상적으로 진행될 수 있기 때문이다. Custom Field의 형태가 User Picker 였기에 사용자를 지정하도록 구성할 수 있는데, 이때 각 workflow에서 필요한 사용자를 지정하면 된다.\n2차 승인자를 지정했다고 끝이 아니다. 연관된 Status에서 Add approval 옵션이 활성화되어야 승인 절차가 정상적으로 진행된다.\n번외, 승인 메일 양식을 바꿔주세요 승인과 얽힌 복잡한 workflow가 잘 동작하는 것을 보며 안도의 숨을 내쉬는 것도 잠시. 승인자에게 발송되는 메일 양식을 변경해달라는 요청이 발생하였다. 메일 본문에 승인/거절 버튼이 바로 보여 자세히 살펴보지 않고 관성적으로 승인할 수 있다는 의견이 제기된 것. 바로 workflow로 이동해서 양식에 대한 내용을 찾아봤지만 찾을 수 없었다. 이 옵션은 어디에 있을까?\n해답은 Project Settings의 Customer notification 항목에 있었다. 다양한 항목 중 Approval required로 이동하면 승인자에게 어떤 양식으로 알림을 줄지 구성할 수 있게 준비되어 있다. 그중 승인 버튼을 숨겨 요청을 직접 확인하게 하는 옵션을 선택하면 끝. 이후 발송되는 메일에는 승인 버튼이 사라지고 이슈를 확인하게끔 강제하게 된다.\n여기까지가 승인과 엮인 작업 마무리. 다행히도 어려움에 부딪혔을 때 사내의 다른 Jira Admin의 도움을 받아 빠르게 어려움을 해결할 수 있었다. 이번 작업을 진행하며 세세한 설정과 여기저기 숨어있는 메뉴에 감탄하게 되었음. 지금은 Automation 관련하여 시행착오를 반복하고 있는데, 이것도 마무리되면 정리할 예정이다.\n","permalink":"https://jihongl.github.io/tech/jira/jira-workflow/","summary":"몸담은 팀의 업무 범위가 늘어나며 문의가 점점 많아지기 시작했다. 다른 팀에선 이슈가 생겼을 때 누구에게 연락해야 하는지 모르기에 조직도의 가장 아래에 있거나 일면식이 있는 팀원에게 연락하기 마련. 이로 인해 특정 구성원에게 자잘한 업무가 몰리고 커뮤니케이션의 비효율을 초래하기 시작하였다.\n다행히도 Jira를 도입한 상태였기에 Jira Service Management를 시작하면 되겠다고 생각, 팀의 Admin을 자처하여 구성하겠노라 선언했다. 글로벌 솔루션이니 쉬운 줄 알았거든. 과거형으로 표현한 것은 당연히 녹록지 않았다는 것. 좋은 말로는 세세한 커스터마이징이 가능한, 다른 말로는 작은 것 하나하나 다 신경 써야 하는 이 녀석을 다루며 당황했던 순간을 까먹기 전에 써두려 한다.","title":"Jira Service Management 구성기 - Workflows와 Approval"},{"content":"이전에 hexo를 활용하여 블로그를 운영하다가 이런저런 핑계로 방치하고 오랜 시간이 지났다. 오랜만에 다시 글을 써보려고 했지만, 사용법을 까먹으니 쉽지 않더라. 이럴 바에 새로 시작하자 마음먹고 찾아보니 최근에는 hugo를 많이 쓴다고. 이런 트렌드엔 올라타는 것이 인지상정이라 바로 시작해본다.\n그리고 같은 실수를 반복하지 않기 위해, Windows에서 Hugo를 설정하는 여정을 까먹기 전에 써둔다.\n1. Scoop 설치 Hugo가 binary 형태 파일을 제공하기는 하지만, 아무래도 활용하기 불편하여 Scoop을 활용한 설치를 진행했다.\n많이 활용하고 있는 Ubuntu나 Mac 환경에서 활용하는 apt나 brew 같은 역할을 한다고 하는데, 이번에 처음 활용해보게 되었음.\nScoop 설치에는 PowerShell을 활용한다.\nInvoke-Expression (New-Object System.Net.WebClient).DownloadString(\u0026#39;https://get.scoop.sh\u0026#39;) 설치는 순식간에 완료되었음.\n2. Hugo 설치 Scoop을 활용하여 Hugo를 설치한다. Powershell에서 실행함.\nscoop install hugo 3. 페이지 생성 이 글을 작성하는 시점 이전에 이미 Linux 환경에서 Hugo 초기 페이지를 생성해두었기에 블로그 작업을 바로 진행할 수 있었다.\n사이트 생성부터 진행해야 하는 분이 계신다면 Hugo Quick Start 가이드를 참고하시길.\n참고로 가이드에 표시된 toml 양식은 낯설었기에 익숙한 yaml을 config 양식으로 구성하였는데, 생성하는 과정에서 확장자만 바꿔주면 간단히 적용할 수 있다.\n아래는 PaperMod 테마를 적용하여 yml 확장자의 config를 생성하는 예시이다.\necho theme = \\\u0026#34;PaperMod\\\u0026#34; \u0026gt;\u0026gt; config.yml OneDrive와 연동하여 멀티플랫폼에서 글을 작성하기 위해 우선 Windows를 선택했지만, 추후 Cloud 서비스를 이용해 Ubuntu에도 구성해볼 예정.\n","permalink":"https://jihongl.github.io/tech/getting-start-hugo/","summary":"이전에 hexo를 활용하여 블로그를 운영하다가 이런저런 핑계로 방치하고 오랜 시간이 지났다. 오랜만에 다시 글을 써보려고 했지만, 사용법을 까먹으니 쉽지 않더라. 이럴 바에 새로 시작하자 마음먹고 찾아보니 최근에는 hugo를 많이 쓴다고. 이런 트렌드엔 올라타는 것이 인지상정이라 바로 시작해본다.\n그리고 같은 실수를 반복하지 않기 위해, Windows에서 Hugo를 설정하는 여정을 까먹기 전에 써둔다.\n1. Scoop 설치 Hugo가 binary 형태 파일을 제공하기는 하지만, 아무래도 활용하기 불편하여 Scoop을 활용한 설치를 진행했다.\n많이 활용하고 있는 Ubuntu나 Mac 환경에서 활용하는 apt나 brew 같은 역할을 한다고 하는데, 이번에 처음 활용해보게 되었음.","title":"Getting start Hugo w/ Windows"},{"content":"최근에 자연어 처리 프로젝트를 진행할 기회가 있었는데, 그 시작이 네이버 카페 게시글을 크롤링하는 것이었다. 크롤링이야 쉽게 끝날 것으로 생각했었는데 녹록지 않았음. 에러도 없고 몇 번이고 경로를 확인했지만 크롤링이 되질 않았었다. 결국, 네이버 카페가 iframe 구조로 되어있기 때문에 다른 접근을 해야 한다는 것을 알게 되었다.\nOSX, Anaconda Python 3.6에 selenium, BeautifulSoup을 사용했다.\n기본적인 코드는 아래와 같음.\nfrom selenium import webdriver driver = webdriver.PhantomJS() driver.get(#cafe_url) driver.switch_to_frame(\u0026#39;cafe_main\u0026#39;) page_source = driver.page_source print(page_source) driver.close() switch_to_frame을 해줘야 원하는 작동을 하는 것을 확인할 수 있었다. 나머지는 다른 크롤링과 동일하게 작성하면 됨.\n","permalink":"https://jihongl.github.io/tech/python/naver-crawl/","summary":"최근에 자연어 처리 프로젝트를 진행할 기회가 있었는데, 그 시작이 네이버 카페 게시글을 크롤링하는 것이었다. 크롤링이야 쉽게 끝날 것으로 생각했었는데 녹록지 않았음. 에러도 없고 몇 번이고 경로를 확인했지만 크롤링이 되질 않았었다. 결국, 네이버 카페가 iframe 구조로 되어있기 때문에 다른 접근을 해야 한다는 것을 알게 되었다.\nOSX, Anaconda Python 3.6에 selenium, BeautifulSoup을 사용했다.\n기본적인 코드는 아래와 같음.\nfrom selenium import webdriver driver = webdriver.PhantomJS() driver.get(#cafe_url) driver.switch_to_frame(\u0026#39;cafe_main\u0026#39;) page_source = driver.page_source print(page_source) driver.close() switch_to_frame을 해줘야 원하는 작동을 하는 것을 확인할 수 있었다.","title":"[파이썬] 네이버 카페 크롤링"}]